import pandas as pd
import numpy as np
import argparse
import matplotlib.pyplot as plt

class CustomLogisticRegression:
    """
    Custom Logistic Regression implementation for binary classification.

    Parameters:
    - learning_rate: float, the learning rate for gradient descent.
    - num_iterations: int, the number of iterations for gradient descent.

    Methods:
    - sigmoid(z): Applies the sigmoid function to the input.
    - fit(X, y): Trains the logistic regression model to predict NBA prospects.
    - predict_proba(X): Predicts the probability of being an NBA prospect for input data.
    """
    def __init__(self, learning_rate=0.01, num_iterations=1000):
        self.learning_rate = learning_rate
        self.num_iterations = num_iterations
        self.weights = None
        self.bias = None

    def sigmoid(self, z):
        """Applies the sigmoid function to the input."""
        return 1 / (1 + np.exp(-z))

    def fit(self, X, y):
        """
        Trains the logistic regression model to predict NBA prospects.

        Parameters:
        - X: DataFrame, the features for the model.
        - y: Series, the target variable.
        """
        m, n = X.shape
        self.weights = np.zeros(n)
        self.bias = 0

        for _ in range(self.num_iterations):
            model = np.dot(X, self.weights) + self.bias
            predictions = self.sigmoid(model)

            dw = (1 / m) * np.dot(X.T, (predictions - y))
            db = (1 / m) * np.sum(predictions - y)

            self.weights -= self.learning_rate * dw
            self.bias -= self.learning_rate * db

    def predict_proba(self, X):
        """
        Predicts the probability of being an NBA prospect for input data.

        Parameters:
        - X: DataFrame, the input data.

        Returns:
        - numpy array: Predicted probabilities.
        """
        model = np.dot(X, self.weights) + self.bias
        predictions = self.sigmoid(model)
        return predictions

class NBAProspectsClassifier:
    """
    NBA Prospects Classifier that compares the stats of current NCAA basketball players
    with former NCAA basketball players who made it to the NBA.

    Parameters:
    - ncaa_data_path: str, the path to the CSV file containing NCAA basketball data.
    - nba_data_path: str, the path to the CSV file containing NBA basketball data.
    - threshold: float, the classification threshold.

    Methods:
    - load_data(filepath): Loads the dataset from a CSV file.
    - calculate_z_scores(stat_names): Calculates Z-scores for each statistical measure.
    - train_model(): Trains the logistic regression model.
    - predict_ncaa_players(): Predicts the probability of NCAA players being NBA prospects.
    - visualize_data(column): Visualizes the distribution of a specific column.
    """
    def __init__(self, ncaa_data_path, nba_data_path, threshold=0.5):
        """
        Initializes the NBAProspectsClassifier.

        Parameters:
        - ncaa_data_path: str, the path to the CSV file containing NCAA basketball data.
        - nba_data_path: str, the path to the CSV file containing NBA basketball data.
        - threshold: float, the classification threshold.
        """
        self.ncaa_data = self.load_data(ncaa_data_path)
        self.nba_data = self.load_data(nba_data_path)
        self.threshold = threshold
        self.custom_model = None

    def load_data(self, filepath):
        """
        Loads the dataset from a CSV file.

        Parameters:
        - filepath: str, the path to the dataset file.

        Returns:
        - DataFrame: The loaded dataset.
        """
        return pd.read_csv(filepath)

    def calculate_z_scores(self, stat_names):
        """
        Calculates Z-scores for each statistical measure.

        Parameters:
        - stat_names: List, names of statistical measures for interpretation.

        Returns:
        - List: Z-scores for each statistical measure.
        """
        current_players = self.ncaa_data
        former_players = self.nba_data

        z_scores = [
            (np.mean(current_players[stat]) - np.mean(former_players[stat])) /
            ((np.std(current_players[stat])**2/len(current_players)) + (np.std(former_players[stat])**2/len(former_players)))**0.5
            for stat in stat_names
        ]

        return z_scores

    def train_model(self):
        """
        Trains the logistic regression model.

        Returns:
        - CustomLogisticRegression: The trained logistic regression model.
        """
        X_nba = self.nba_data.drop('NBA_Prospect', axis=1)
        y_nba = self.nba_data['NBA_Prospect']

        self.custom_model = CustomLogisticRegression()
        self.custom_model.fit(X_nba, y_nba)

    def predict_ncaa_players(self):
        """
        Predicts the probability of NCAA players being NBA prospects.

        Returns:
        - DataFrame: A DataFrame with player names and predicted probabilities.
        """
        X_ncaa = self.ncaa_data.drop('Player', axis=1)  # Assuming 'Player' is the name column
        predictions = self.custom_model.predict_proba(X_ncaa)
        result_df = pd.DataFrame({'Player': self.ncaa_data['Player'], 'Predicted_Probability': predictions})
        return result_df

    def visualize_data(self, column):
        """
        Visualizes the distribution of a specific column.

        Parameters:
        - column: str, the column name for visualization.
        """
        plt.figure(figsize=(10, 6))
        self.ncaa_data[column].hist()
        plt.title(f'Distribution of {column}')
        plt.xlabel(column)
        plt.ylabel('Frequency')
        plt.show()

def main():
    parser = argparse.ArgumentParser(description="NBA Prospects Classifier")
    parser.add_argument("ncaa_data_path", help="Path to the CSV file containing NCAA basketball data")
    parser.add_argument("nba_data_path", help="Path to the CSV file containing NBA basketball data")
    parser.add_argument("--threshold", type=float, default=0.5, help="Classification threshold")
    parser.add_argument("--visualize_column", help="Name of the column to visualize")

    args = parser.parse_args()

    classifier = NBAProspectsClassifier(
        ncaa_data_path=args.ncaa_data_path,
        nba_data_path=args.nba_data_path,
        threshold=args.threshold
    )

    # Calculate and print Z-scores
    stat_names = ['Points_Per_Game', 'Rebounds_Per_Game', 'Assists_Per_Game']
    z_scores = classifier.calculate_z_scores(stat_names)
    print("Z-Scores of Basic Stats for NBA Prospects Classification:")
    print({stat: z_score for stat, z_score in zip(stat_names, z_scores)})

    # Train the model
    classifier.train_model()

    # Predict NBA prospects among NCAA players
    predictions_df = classifier.predict_ncaa_players()
    print("\nPredictions for NCAA Players:")
    print(predictions_df)

    # Visualize the distribution of a specified column
    if args.visualize_column:
        classifier.visualize_data(args.visualize_column)

if __name__ == "__main__":
    main()
 
